URL: https://www.youtube.com/watch?v=l-8i0ur_Hds&list=PL1BztTYDF-QNlGo5-g65Xj1mINHYk_FM9&index=2&ab_channel=procademy

--Install Angular CLI
npm install -global @angular/cli@latest
--check the version
ng version

--Create Angular Project
Folder location: ng new project-name, example ng angular-ekart

ng new angular-ekart-1 --no-standalone ,use this to add app.module.ts
-Would you like to add angular routing - no
-css
-server-side rendering ssr - yes

--Compile and Run
ng serve
local: http://localhost:4200/

--Add folder component on the project
ng g c header --skip-tests
ng g c topHeader

--node_modules, not included in commit, 
npm install

--locate the specific folder
cd src/app/header

--Directives
Components Directive = Components
Attribute Directive = ngStyle, ngClass
Structural Directive = ngFor, ngIf

--Property binding - []
[disabled]="!(product.inStock > 0)"
[src]="product.pImage"

--Event binding - ()
(input)="onNameChange()"

--Project location
Office: E:\Project\Tutorial2023\Angular\angular-complete-course-1

---------------------------------------------------
--Folders
node_modules = Node modules allow users to reuse existing code instead of reinventing the wheel. This can save time and effort by leveraging the work of others in the NodeJS community. Modularity: Node modules promote a modular approach to software development.

package.json = to identify your project and understand how to handle the project's dependencies.

.editorconfig = maintain consistent coding styles and conventions in a codebase, regardless of the editor or IDE you use.

.gitignore = location of file not included on the commit

angular.json = project configuration. The angular.json file at the root level of an Angular workspace provides workspace-wide and project-specific configuration defaults

package-lock.json = to ensure that the same dependencies are installed consistently across different environments, such as development and production environments

tsconfig.json =  allows you to configure how the TypeScript compiler processes your TypeScript code

src folder = most important folder of all.

main.ts = starting of the project.

---------------------------------------------------
Child Component to Parent Component to Child component
1. Child to Parent > Custom event binding & @Output() Decorator
2. Parent to other Child > Custom property binding & @Input() Decorator
---------------------------------------------------

